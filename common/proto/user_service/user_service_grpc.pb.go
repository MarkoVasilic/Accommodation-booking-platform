// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: user_service/user_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_GetUser_FullMethodName                = "/user_service.UserService/GetUser"
	UserService_GetLoggedUser_FullMethodName          = "/user_service.UserService/GetLoggedUser"
	UserService_CreateUser_FullMethodName             = "/user_service.UserService/CreateUser"
	UserService_Login_FullMethodName                  = "/user_service.UserService/Login"
	UserService_UpdateUser_FullMethodName             = "/user_service.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName             = "/user_service.UserService/DeleteUser"
	UserService_GetAllHosts_FullMethodName            = "/user_service.UserService/GetAllHosts"
	UserService_CreateUserGrade_FullMethodName        = "/user_service.UserService/CreateUserGrade"
	UserService_GetAllGuestGrades_FullMethodName      = "/user_service.UserService/GetAllGuestGrades"
	UserService_UpdateUserGrade_FullMethodName        = "/user_service.UserService/UpdateUserGrade"
	UserService_DeleteUserGrade_FullMethodName        = "/user_service.UserService/DeleteUserGrade"
	UserService_GetAllUserGrade_FullMethodName        = "/user_service.UserService/GetAllUserGrade"
	UserService_HostProminent_FullMethodName          = "/user_service.UserService/HostProminent"
	UserService_UpdateNotificationOn_FullMethodName   = "/user_service.UserService/UpdateNotificationOn"
	UserService_CreateNotification_FullMethodName     = "/user_service.UserService/CreateNotification"
	UserService_GetAllNotifications_FullMethodName    = "/user_service.UserService/GetAllNotifications"
	UserService_GetUserNotificationsOn_FullMethodName = "/user_service.UserService/GetUserNotificationsOn"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetLoggedUser(ctx context.Context, in *GetLoggedUserRequest, opts ...grpc.CallOption) (*GetLoggedUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetAllHosts(ctx context.Context, in *GetAllHostsRequest, opts ...grpc.CallOption) (*GetAllHostsResponse, error)
	CreateUserGrade(ctx context.Context, in *CreateUserGradeRequest, opts ...grpc.CallOption) (*CreateUserGradeResponse, error)
	GetAllGuestGrades(ctx context.Context, in *GetAllGuestGradesRequest, opts ...grpc.CallOption) (*GetAllGuestGradesResponse, error)
	UpdateUserGrade(ctx context.Context, in *UpdateUserGradeRequest, opts ...grpc.CallOption) (*UpdateUserGradeResponse, error)
	DeleteUserGrade(ctx context.Context, in *DeleteUserGradeRequest, opts ...grpc.CallOption) (*DeleteUserGradeResponse, error)
	GetAllUserGrade(ctx context.Context, in *GetAllUserGradeRequest, opts ...grpc.CallOption) (*GetAllUserGradeResponse, error)
	HostProminent(ctx context.Context, in *HostProminentRequest, opts ...grpc.CallOption) (*HostProminentResponse, error)
	UpdateNotificationOn(ctx context.Context, in *UpdateNotificationOnRequest, opts ...grpc.CallOption) (*UpdateNotificationOnResponse, error)
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error)
	GetAllNotifications(ctx context.Context, in *GetAllNotificationsRequest, opts ...grpc.CallOption) (*GetAllNotificationsResponse, error)
	GetUserNotificationsOn(ctx context.Context, in *GetUserNotificationsOnRequest, opts ...grpc.CallOption) (*GetUserNotificationsOnResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLoggedUser(ctx context.Context, in *GetLoggedUserRequest, opts ...grpc.CallOption) (*GetLoggedUserResponse, error) {
	out := new(GetLoggedUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetLoggedUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllHosts(ctx context.Context, in *GetAllHostsRequest, opts ...grpc.CallOption) (*GetAllHostsResponse, error) {
	out := new(GetAllHostsResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllHosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserGrade(ctx context.Context, in *CreateUserGradeRequest, opts ...grpc.CallOption) (*CreateUserGradeResponse, error) {
	out := new(CreateUserGradeResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllGuestGrades(ctx context.Context, in *GetAllGuestGradesRequest, opts ...grpc.CallOption) (*GetAllGuestGradesResponse, error) {
	out := new(GetAllGuestGradesResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllGuestGrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserGrade(ctx context.Context, in *UpdateUserGradeRequest, opts ...grpc.CallOption) (*UpdateUserGradeResponse, error) {
	out := new(UpdateUserGradeResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserGrade(ctx context.Context, in *DeleteUserGradeRequest, opts ...grpc.CallOption) (*DeleteUserGradeResponse, error) {
	out := new(DeleteUserGradeResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserGrade(ctx context.Context, in *GetAllUserGradeRequest, opts ...grpc.CallOption) (*GetAllUserGradeResponse, error) {
	out := new(GetAllUserGradeResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllUserGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) HostProminent(ctx context.Context, in *HostProminentRequest, opts ...grpc.CallOption) (*HostProminentResponse, error) {
	out := new(HostProminentResponse)
	err := c.cc.Invoke(ctx, UserService_HostProminent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateNotificationOn(ctx context.Context, in *UpdateNotificationOnRequest, opts ...grpc.CallOption) (*UpdateNotificationOnResponse, error) {
	out := new(UpdateNotificationOnResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateNotificationOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error) {
	out := new(CreateNotificationResponse)
	err := c.cc.Invoke(ctx, UserService_CreateNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllNotifications(ctx context.Context, in *GetAllNotificationsRequest, opts ...grpc.CallOption) (*GetAllNotificationsResponse, error) {
	out := new(GetAllNotificationsResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserNotificationsOn(ctx context.Context, in *GetUserNotificationsOnRequest, opts ...grpc.CallOption) (*GetUserNotificationsOnResponse, error) {
	out := new(GetUserNotificationsOnResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserNotificationsOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetLoggedUser(context.Context, *GetLoggedUserRequest) (*GetLoggedUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetAllHosts(context.Context, *GetAllHostsRequest) (*GetAllHostsResponse, error)
	CreateUserGrade(context.Context, *CreateUserGradeRequest) (*CreateUserGradeResponse, error)
	GetAllGuestGrades(context.Context, *GetAllGuestGradesRequest) (*GetAllGuestGradesResponse, error)
	UpdateUserGrade(context.Context, *UpdateUserGradeRequest) (*UpdateUserGradeResponse, error)
	DeleteUserGrade(context.Context, *DeleteUserGradeRequest) (*DeleteUserGradeResponse, error)
	GetAllUserGrade(context.Context, *GetAllUserGradeRequest) (*GetAllUserGradeResponse, error)
	HostProminent(context.Context, *HostProminentRequest) (*HostProminentResponse, error)
	UpdateNotificationOn(context.Context, *UpdateNotificationOnRequest) (*UpdateNotificationOnResponse, error)
	CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error)
	GetAllNotifications(context.Context, *GetAllNotificationsRequest) (*GetAllNotificationsResponse, error)
	GetUserNotificationsOn(context.Context, *GetUserNotificationsOnRequest) (*GetUserNotificationsOnResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetLoggedUser(context.Context, *GetLoggedUserRequest) (*GetLoggedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggedUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) GetAllHosts(context.Context, *GetAllHostsRequest) (*GetAllHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHosts not implemented")
}
func (UnimplementedUserServiceServer) CreateUserGrade(context.Context, *CreateUserGradeRequest) (*CreateUserGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGrade not implemented")
}
func (UnimplementedUserServiceServer) GetAllGuestGrades(context.Context, *GetAllGuestGradesRequest) (*GetAllGuestGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGuestGrades not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserGrade(context.Context, *UpdateUserGradeRequest) (*UpdateUserGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGrade not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserGrade(context.Context, *DeleteUserGradeRequest) (*DeleteUserGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGrade not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserGrade(context.Context, *GetAllUserGradeRequest) (*GetAllUserGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserGrade not implemented")
}
func (UnimplementedUserServiceServer) HostProminent(context.Context, *HostProminentRequest) (*HostProminentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostProminent not implemented")
}
func (UnimplementedUserServiceServer) UpdateNotificationOn(context.Context, *UpdateNotificationOnRequest) (*UpdateNotificationOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationOn not implemented")
}
func (UnimplementedUserServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedUserServiceServer) GetAllNotifications(context.Context, *GetAllNotificationsRequest) (*GetAllNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotifications not implemented")
}
func (UnimplementedUserServiceServer) GetUserNotificationsOn(context.Context, *GetUserNotificationsOnRequest) (*GetUserNotificationsOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotificationsOn not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLoggedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoggedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLoggedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetLoggedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLoggedUser(ctx, req.(*GetLoggedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllHosts(ctx, req.(*GetAllHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserGrade(ctx, req.(*CreateUserGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllGuestGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGuestGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllGuestGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllGuestGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllGuestGrades(ctx, req.(*GetAllGuestGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserGrade(ctx, req.(*UpdateUserGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserGrade(ctx, req.(*DeleteUserGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserGrade(ctx, req.(*GetAllUserGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_HostProminent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostProminentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).HostProminent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_HostProminent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).HostProminent(ctx, req.(*HostProminentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateNotificationOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateNotificationOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateNotificationOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateNotificationOn(ctx, req.(*UpdateNotificationOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllNotifications(ctx, req.(*GetAllNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserNotificationsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserNotificationsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserNotificationsOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserNotificationsOn(ctx, req.(*GetUserNotificationsOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetLoggedUser",
			Handler:    _UserService_GetLoggedUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetAllHosts",
			Handler:    _UserService_GetAllHosts_Handler,
		},
		{
			MethodName: "CreateUserGrade",
			Handler:    _UserService_CreateUserGrade_Handler,
		},
		{
			MethodName: "GetAllGuestGrades",
			Handler:    _UserService_GetAllGuestGrades_Handler,
		},
		{
			MethodName: "UpdateUserGrade",
			Handler:    _UserService_UpdateUserGrade_Handler,
		},
		{
			MethodName: "DeleteUserGrade",
			Handler:    _UserService_DeleteUserGrade_Handler,
		},
		{
			MethodName: "GetAllUserGrade",
			Handler:    _UserService_GetAllUserGrade_Handler,
		},
		{
			MethodName: "HostProminent",
			Handler:    _UserService_HostProminent_Handler,
		},
		{
			MethodName: "UpdateNotificationOn",
			Handler:    _UserService_UpdateNotificationOn_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _UserService_CreateNotification_Handler,
		},
		{
			MethodName: "GetAllNotifications",
			Handler:    _UserService_GetAllNotifications_Handler,
		},
		{
			MethodName: "GetUserNotificationsOn",
			Handler:    _UserService_GetUserNotificationsOn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service/user_service.proto",
}
