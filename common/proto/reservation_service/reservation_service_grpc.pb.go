// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: reservation_service/reservation_service.proto

package reservation_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReservationService_GetAllReservations_FullMethodName              = "/reservation_service.ReservationService/GetAllReservations"
	ReservationService_CreateReservation_FullMethodName               = "/reservation_service.ReservationService/CreateReservation"
	ReservationService_GetFindReservationPendingGuest_FullMethodName  = "/reservation_service.ReservationService/GetFindReservationPendingGuest"
	ReservationService_GetFindReservationAcceptedGuest_FullMethodName = "/reservation_service.ReservationService/GetFindReservationAcceptedGuest"
	ReservationService_GetFindReservationHost_FullMethodName          = "/reservation_service.ReservationService/GetFindReservationHost"
	ReservationService_CancelReservation_FullMethodName               = "/reservation_service.ReservationService/CancelReservation"
	ReservationService_DeleteLogicallyReservation_FullMethodName      = "/reservation_service.ReservationService/DeleteLogicallyReservation"
	ReservationService_AcceptReservation_FullMethodName               = "/reservation_service.ReservationService/AcceptReservation"
	ReservationService_GetAllReservationsHost_FullMethodName          = "/reservation_service.ReservationService/GetAllReservationsHost"
	ReservationService_DeleteReservationsHost_FullMethodName          = "/reservation_service.ReservationService/DeleteReservationsHost"
)

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	GetAllReservations(ctx context.Context, in *GetAllReservationsRequest, opts ...grpc.CallOption) (*GetAllReservationsResponse, error)
	CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*CreateReservationResponse, error)
	GetFindReservationPendingGuest(ctx context.Context, in *GetFindReservationPendingGuestRequest, opts ...grpc.CallOption) (*GetFindReservationPendingGuestResponse, error)
	GetFindReservationAcceptedGuest(ctx context.Context, in *GetFindReservationAcceptedGuestRequest, opts ...grpc.CallOption) (*GetFindReservationAcceptedGuestResponse, error)
	GetFindReservationHost(ctx context.Context, in *GetFindReservationHostRequest, opts ...grpc.CallOption) (*GetFindReservationHostResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error)
	DeleteLogicallyReservation(ctx context.Context, in *DeleteLogicallyReservationRequest, opts ...grpc.CallOption) (*DeleteLogicallyReservationResponse, error)
	AcceptReservation(ctx context.Context, in *AcceptReservationRequest, opts ...grpc.CallOption) (*AcceptReservationResponse, error)
	GetAllReservationsHost(ctx context.Context, in *GetAllReservationsHostRequest, opts ...grpc.CallOption) (*GetAllReservationsHostResponse, error)
	DeleteReservationsHost(ctx context.Context, in *DeleteReservationsHostRequest, opts ...grpc.CallOption) (*DeleteReservationsHostResponse, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) GetAllReservations(ctx context.Context, in *GetAllReservationsRequest, opts ...grpc.CallOption) (*GetAllReservationsResponse, error) {
	out := new(GetAllReservationsResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetAllReservations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*CreateReservationResponse, error) {
	out := new(CreateReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_CreateReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetFindReservationPendingGuest(ctx context.Context, in *GetFindReservationPendingGuestRequest, opts ...grpc.CallOption) (*GetFindReservationPendingGuestResponse, error) {
	out := new(GetFindReservationPendingGuestResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetFindReservationPendingGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetFindReservationAcceptedGuest(ctx context.Context, in *GetFindReservationAcceptedGuestRequest, opts ...grpc.CallOption) (*GetFindReservationAcceptedGuestResponse, error) {
	out := new(GetFindReservationAcceptedGuestResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetFindReservationAcceptedGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetFindReservationHost(ctx context.Context, in *GetFindReservationHostRequest, opts ...grpc.CallOption) (*GetFindReservationHostResponse, error) {
	out := new(GetFindReservationHostResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetFindReservationHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error) {
	out := new(CancelReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_CancelReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) DeleteLogicallyReservation(ctx context.Context, in *DeleteLogicallyReservationRequest, opts ...grpc.CallOption) (*DeleteLogicallyReservationResponse, error) {
	out := new(DeleteLogicallyReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_DeleteLogicallyReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) AcceptReservation(ctx context.Context, in *AcceptReservationRequest, opts ...grpc.CallOption) (*AcceptReservationResponse, error) {
	out := new(AcceptReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_AcceptReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetAllReservationsHost(ctx context.Context, in *GetAllReservationsHostRequest, opts ...grpc.CallOption) (*GetAllReservationsHostResponse, error) {
	out := new(GetAllReservationsHostResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetAllReservationsHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) DeleteReservationsHost(ctx context.Context, in *DeleteReservationsHostRequest, opts ...grpc.CallOption) (*DeleteReservationsHostResponse, error) {
	out := new(DeleteReservationsHostResponse)
	err := c.cc.Invoke(ctx, ReservationService_DeleteReservationsHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations must embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	GetAllReservations(context.Context, *GetAllReservationsRequest) (*GetAllReservationsResponse, error)
	CreateReservation(context.Context, *CreateReservationRequest) (*CreateReservationResponse, error)
	GetFindReservationPendingGuest(context.Context, *GetFindReservationPendingGuestRequest) (*GetFindReservationPendingGuestResponse, error)
	GetFindReservationAcceptedGuest(context.Context, *GetFindReservationAcceptedGuestRequest) (*GetFindReservationAcceptedGuestResponse, error)
	GetFindReservationHost(context.Context, *GetFindReservationHostRequest) (*GetFindReservationHostResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error)
	DeleteLogicallyReservation(context.Context, *DeleteLogicallyReservationRequest) (*DeleteLogicallyReservationResponse, error)
	AcceptReservation(context.Context, *AcceptReservationRequest) (*AcceptReservationResponse, error)
	GetAllReservationsHost(context.Context, *GetAllReservationsHostRequest) (*GetAllReservationsHostResponse, error)
	DeleteReservationsHost(context.Context, *DeleteReservationsHostRequest) (*DeleteReservationsHostResponse, error)
	mustEmbedUnimplementedReservationServiceServer()
}

// UnimplementedReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) GetAllReservations(context.Context, *GetAllReservationsRequest) (*GetAllReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReservations not implemented")
}
func (UnimplementedReservationServiceServer) CreateReservation(context.Context, *CreateReservationRequest) (*CreateReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation not implemented")
}
func (UnimplementedReservationServiceServer) GetFindReservationPendingGuest(context.Context, *GetFindReservationPendingGuestRequest) (*GetFindReservationPendingGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFindReservationPendingGuest not implemented")
}
func (UnimplementedReservationServiceServer) GetFindReservationAcceptedGuest(context.Context, *GetFindReservationAcceptedGuestRequest) (*GetFindReservationAcceptedGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFindReservationAcceptedGuest not implemented")
}
func (UnimplementedReservationServiceServer) GetFindReservationHost(context.Context, *GetFindReservationHostRequest) (*GetFindReservationHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFindReservationHost not implemented")
}
func (UnimplementedReservationServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedReservationServiceServer) DeleteLogicallyReservation(context.Context, *DeleteLogicallyReservationRequest) (*DeleteLogicallyReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogicallyReservation not implemented")
}
func (UnimplementedReservationServiceServer) AcceptReservation(context.Context, *AcceptReservationRequest) (*AcceptReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptReservation not implemented")
}
func (UnimplementedReservationServiceServer) GetAllReservationsHost(context.Context, *GetAllReservationsHostRequest) (*GetAllReservationsHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReservationsHost not implemented")
}
func (UnimplementedReservationServiceServer) DeleteReservationsHost(context.Context, *DeleteReservationsHostRequest) (*DeleteReservationsHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservationsHost not implemented")
}
func (UnimplementedReservationServiceServer) mustEmbedUnimplementedReservationServiceServer() {}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_GetAllReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetAllReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetAllReservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetAllReservations(ctx, req.(*GetAllReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CreateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CreateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CreateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CreateReservation(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetFindReservationPendingGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindReservationPendingGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetFindReservationPendingGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetFindReservationPendingGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetFindReservationPendingGuest(ctx, req.(*GetFindReservationPendingGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetFindReservationAcceptedGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindReservationAcceptedGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetFindReservationAcceptedGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetFindReservationAcceptedGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetFindReservationAcceptedGuest(ctx, req.(*GetFindReservationAcceptedGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetFindReservationHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindReservationHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetFindReservationHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetFindReservationHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetFindReservationHost(ctx, req.(*GetFindReservationHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_DeleteLogicallyReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogicallyReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).DeleteLogicallyReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_DeleteLogicallyReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).DeleteLogicallyReservation(ctx, req.(*DeleteLogicallyReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_AcceptReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).AcceptReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_AcceptReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).AcceptReservation(ctx, req.(*AcceptReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetAllReservationsHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReservationsHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetAllReservationsHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetAllReservationsHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetAllReservationsHost(ctx, req.(*GetAllReservationsHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_DeleteReservationsHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservationsHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).DeleteReservationsHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_DeleteReservationsHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).DeleteReservationsHost(ctx, req.(*DeleteReservationsHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservation_service.ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllReservations",
			Handler:    _ReservationService_GetAllReservations_Handler,
		},
		{
			MethodName: "CreateReservation",
			Handler:    _ReservationService_CreateReservation_Handler,
		},
		{
			MethodName: "GetFindReservationPendingGuest",
			Handler:    _ReservationService_GetFindReservationPendingGuest_Handler,
		},
		{
			MethodName: "GetFindReservationAcceptedGuest",
			Handler:    _ReservationService_GetFindReservationAcceptedGuest_Handler,
		},
		{
			MethodName: "GetFindReservationHost",
			Handler:    _ReservationService_GetFindReservationHost_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _ReservationService_CancelReservation_Handler,
		},
		{
			MethodName: "DeleteLogicallyReservation",
			Handler:    _ReservationService_DeleteLogicallyReservation_Handler,
		},
		{
			MethodName: "AcceptReservation",
			Handler:    _ReservationService_AcceptReservation_Handler,
		},
		{
			MethodName: "GetAllReservationsHost",
			Handler:    _ReservationService_GetAllReservationsHost_Handler,
		},
		{
			MethodName: "DeleteReservationsHost",
			Handler:    _ReservationService_DeleteReservationsHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation_service/reservation_service.proto",
}
