// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: accommodation_service/accommodation_service.proto

package accommodation_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccommodationService_GetAllAccommodations_FullMethodName           = "/accommodation_service.AccommodationService/GetAllAccommodations"
	AccommodationService_CreateAccommodation_FullMethodName            = "/accommodation_service.AccommodationService/CreateAccommodation"
	AccommodationService_GetAccommodationByAvailability_FullMethodName = "/accommodation_service.AccommodationService/GetAccommodationByAvailability"
	AccommodationService_GetAllAvailabilities_FullMethodName           = "/accommodation_service.AccommodationService/GetAllAvailabilities"
	AccommodationService_GetAvailabilityById_FullMethodName            = "/accommodation_service.AccommodationService/GetAvailabilityById"
	AccommodationService_GetAccommodationById_FullMethodName           = "/accommodation_service.AccommodationService/GetAccommodationById"
	AccommodationService_CreateAvailability_FullMethodName             = "/accommodation_service.AccommodationService/CreateAvailability"
	AccommodationService_UpdateAvailability_FullMethodName             = "/accommodation_service.AccommodationService/UpdateAvailability"
	AccommodationService_SearchAvailability_FullMethodName             = "/accommodation_service.AccommodationService/SearchAvailability"
	AccommodationService_DeleteAccommodationsByHost_FullMethodName     = "/accommodation_service.AccommodationService/DeleteAccommodationsByHost"
	AccommodationService_GetEveryAccommodation_FullMethodName          = "/accommodation_service.AccommodationService/GetEveryAccommodation"
	AccommodationService_CreateAccommodationGrade_FullMethodName       = "/accommodation_service.AccommodationService/CreateAccommodationGrade"
	AccommodationService_GetAllAccommodationGuestGrades_FullMethodName = "/accommodation_service.AccommodationService/GetAllAccommodationGuestGrades"
	AccommodationService_UpdateAccommodationGrade_FullMethodName       = "/accommodation_service.AccommodationService/UpdateAccommodationGrade"
	AccommodationService_DeleteAccommodationGrade_FullMethodName       = "/accommodation_service.AccommodationService/DeleteAccommodationGrade"
	AccommodationService_GetAllAccommodationGrade_FullMethodName       = "/accommodation_service.AccommodationService/GetAllAccommodationGrade"
	AccommodationService_FilterAvailability_FullMethodName             = "/accommodation_service.AccommodationService/FilterAvailability"
)

// AccommodationServiceClient is the client API for AccommodationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccommodationServiceClient interface {
	GetAllAccommodations(ctx context.Context, in *GetAllAccommodationsRequest, opts ...grpc.CallOption) (*GetAllAccommodationsResponse, error)
	CreateAccommodation(ctx context.Context, in *CreateAccommodationRequest, opts ...grpc.CallOption) (*CreateAccommodationResponse, error)
	GetAccommodationByAvailability(ctx context.Context, in *GetAccommodationByAvailabilityRequest, opts ...grpc.CallOption) (*GetAccommodationByAvailabilityResponse, error)
	GetAllAvailabilities(ctx context.Context, in *GetAllAvailabilitiesRequest, opts ...grpc.CallOption) (*GetAllAvailabilitiesResponse, error)
	GetAvailabilityById(ctx context.Context, in *GetAvailabilityByIdRequest, opts ...grpc.CallOption) (*GetAvailabilityByIdResponse, error)
	GetAccommodationById(ctx context.Context, in *GetAccommodationByIdRequest, opts ...grpc.CallOption) (*GetAccommodationByIdResponse, error)
	CreateAvailability(ctx context.Context, in *CreateAvailabilityRequest, opts ...grpc.CallOption) (*CreateAvailabilityResponse, error)
	UpdateAvailability(ctx context.Context, in *UpdateAvailabilityRequest, opts ...grpc.CallOption) (*UpdateAvailabilityResponse, error)
	SearchAvailability(ctx context.Context, in *SearchAvailabilityRequest, opts ...grpc.CallOption) (*SearchAvailabilityResponse, error)
	DeleteAccommodationsByHost(ctx context.Context, in *DeleteAccommodationsByHostRequest, opts ...grpc.CallOption) (*DeleteAccommodationsByHostResponse, error)
	GetEveryAccommodation(ctx context.Context, in *GetEveryAccommodationRequest, opts ...grpc.CallOption) (*GetEveryAccommodationResponse, error)
	CreateAccommodationGrade(ctx context.Context, in *CreateAccommodationGradeRequest, opts ...grpc.CallOption) (*CreateAccommodationGradeResponse, error)
	GetAllAccommodationGuestGrades(ctx context.Context, in *GetAllAccommodationGuestGradesRequest, opts ...grpc.CallOption) (*GetAllAccommodationGuestGradesResponse, error)
	UpdateAccommodationGrade(ctx context.Context, in *UpdateAccommodationGradeRequest, opts ...grpc.CallOption) (*UpdateAccommodationGradeResponse, error)
	DeleteAccommodationGrade(ctx context.Context, in *DeleteAccommodationGradeRequest, opts ...grpc.CallOption) (*DeleteAccommodationGradeResponse, error)
	GetAllAccommodationGrade(ctx context.Context, in *GetAllAccommodationGradeRequest, opts ...grpc.CallOption) (*GetAllAccommodationGradeResponse, error)
	FilterAvailability(ctx context.Context, in *FilterAvailabilityRequest, opts ...grpc.CallOption) (*FilterAvailabilityResponse, error)
}

type accommodationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccommodationServiceClient(cc grpc.ClientConnInterface) AccommodationServiceClient {
	return &accommodationServiceClient{cc}
}

func (c *accommodationServiceClient) GetAllAccommodations(ctx context.Context, in *GetAllAccommodationsRequest, opts ...grpc.CallOption) (*GetAllAccommodationsResponse, error) {
	out := new(GetAllAccommodationsResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAllAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) CreateAccommodation(ctx context.Context, in *CreateAccommodationRequest, opts ...grpc.CallOption) (*CreateAccommodationResponse, error) {
	out := new(CreateAccommodationResponse)
	err := c.cc.Invoke(ctx, AccommodationService_CreateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAccommodationByAvailability(ctx context.Context, in *GetAccommodationByAvailabilityRequest, opts ...grpc.CallOption) (*GetAccommodationByAvailabilityResponse, error) {
	out := new(GetAccommodationByAvailabilityResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAccommodationByAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAllAvailabilities(ctx context.Context, in *GetAllAvailabilitiesRequest, opts ...grpc.CallOption) (*GetAllAvailabilitiesResponse, error) {
	out := new(GetAllAvailabilitiesResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAllAvailabilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAvailabilityById(ctx context.Context, in *GetAvailabilityByIdRequest, opts ...grpc.CallOption) (*GetAvailabilityByIdResponse, error) {
	out := new(GetAvailabilityByIdResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAvailabilityById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAccommodationById(ctx context.Context, in *GetAccommodationByIdRequest, opts ...grpc.CallOption) (*GetAccommodationByIdResponse, error) {
	out := new(GetAccommodationByIdResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAccommodationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) CreateAvailability(ctx context.Context, in *CreateAvailabilityRequest, opts ...grpc.CallOption) (*CreateAvailabilityResponse, error) {
	out := new(CreateAvailabilityResponse)
	err := c.cc.Invoke(ctx, AccommodationService_CreateAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) UpdateAvailability(ctx context.Context, in *UpdateAvailabilityRequest, opts ...grpc.CallOption) (*UpdateAvailabilityResponse, error) {
	out := new(UpdateAvailabilityResponse)
	err := c.cc.Invoke(ctx, AccommodationService_UpdateAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) SearchAvailability(ctx context.Context, in *SearchAvailabilityRequest, opts ...grpc.CallOption) (*SearchAvailabilityResponse, error) {
	out := new(SearchAvailabilityResponse)
	err := c.cc.Invoke(ctx, AccommodationService_SearchAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) DeleteAccommodationsByHost(ctx context.Context, in *DeleteAccommodationsByHostRequest, opts ...grpc.CallOption) (*DeleteAccommodationsByHostResponse, error) {
	out := new(DeleteAccommodationsByHostResponse)
	err := c.cc.Invoke(ctx, AccommodationService_DeleteAccommodationsByHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetEveryAccommodation(ctx context.Context, in *GetEveryAccommodationRequest, opts ...grpc.CallOption) (*GetEveryAccommodationResponse, error) {
	out := new(GetEveryAccommodationResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetEveryAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) CreateAccommodationGrade(ctx context.Context, in *CreateAccommodationGradeRequest, opts ...grpc.CallOption) (*CreateAccommodationGradeResponse, error) {
	out := new(CreateAccommodationGradeResponse)
	err := c.cc.Invoke(ctx, AccommodationService_CreateAccommodationGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAllAccommodationGuestGrades(ctx context.Context, in *GetAllAccommodationGuestGradesRequest, opts ...grpc.CallOption) (*GetAllAccommodationGuestGradesResponse, error) {
	out := new(GetAllAccommodationGuestGradesResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAllAccommodationGuestGrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) UpdateAccommodationGrade(ctx context.Context, in *UpdateAccommodationGradeRequest, opts ...grpc.CallOption) (*UpdateAccommodationGradeResponse, error) {
	out := new(UpdateAccommodationGradeResponse)
	err := c.cc.Invoke(ctx, AccommodationService_UpdateAccommodationGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) DeleteAccommodationGrade(ctx context.Context, in *DeleteAccommodationGradeRequest, opts ...grpc.CallOption) (*DeleteAccommodationGradeResponse, error) {
	out := new(DeleteAccommodationGradeResponse)
	err := c.cc.Invoke(ctx, AccommodationService_DeleteAccommodationGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) GetAllAccommodationGrade(ctx context.Context, in *GetAllAccommodationGradeRequest, opts ...grpc.CallOption) (*GetAllAccommodationGradeResponse, error) {
	out := new(GetAllAccommodationGradeResponse)
	err := c.cc.Invoke(ctx, AccommodationService_GetAllAccommodationGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceClient) FilterAvailability(ctx context.Context, in *FilterAvailabilityRequest, opts ...grpc.CallOption) (*FilterAvailabilityResponse, error) {
	out := new(FilterAvailabilityResponse)
	err := c.cc.Invoke(ctx, AccommodationService_FilterAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccommodationServiceServer is the server API for AccommodationService service.
// All implementations must embed UnimplementedAccommodationServiceServer
// for forward compatibility
type AccommodationServiceServer interface {
	GetAllAccommodations(context.Context, *GetAllAccommodationsRequest) (*GetAllAccommodationsResponse, error)
	CreateAccommodation(context.Context, *CreateAccommodationRequest) (*CreateAccommodationResponse, error)
	GetAccommodationByAvailability(context.Context, *GetAccommodationByAvailabilityRequest) (*GetAccommodationByAvailabilityResponse, error)
	GetAllAvailabilities(context.Context, *GetAllAvailabilitiesRequest) (*GetAllAvailabilitiesResponse, error)
	GetAvailabilityById(context.Context, *GetAvailabilityByIdRequest) (*GetAvailabilityByIdResponse, error)
	GetAccommodationById(context.Context, *GetAccommodationByIdRequest) (*GetAccommodationByIdResponse, error)
	CreateAvailability(context.Context, *CreateAvailabilityRequest) (*CreateAvailabilityResponse, error)
	UpdateAvailability(context.Context, *UpdateAvailabilityRequest) (*UpdateAvailabilityResponse, error)
	SearchAvailability(context.Context, *SearchAvailabilityRequest) (*SearchAvailabilityResponse, error)
	DeleteAccommodationsByHost(context.Context, *DeleteAccommodationsByHostRequest) (*DeleteAccommodationsByHostResponse, error)
	GetEveryAccommodation(context.Context, *GetEveryAccommodationRequest) (*GetEveryAccommodationResponse, error)
	CreateAccommodationGrade(context.Context, *CreateAccommodationGradeRequest) (*CreateAccommodationGradeResponse, error)
	GetAllAccommodationGuestGrades(context.Context, *GetAllAccommodationGuestGradesRequest) (*GetAllAccommodationGuestGradesResponse, error)
	UpdateAccommodationGrade(context.Context, *UpdateAccommodationGradeRequest) (*UpdateAccommodationGradeResponse, error)
	DeleteAccommodationGrade(context.Context, *DeleteAccommodationGradeRequest) (*DeleteAccommodationGradeResponse, error)
	GetAllAccommodationGrade(context.Context, *GetAllAccommodationGradeRequest) (*GetAllAccommodationGradeResponse, error)
	FilterAvailability(context.Context, *FilterAvailabilityRequest) (*FilterAvailabilityResponse, error)
	mustEmbedUnimplementedAccommodationServiceServer()
}

// UnimplementedAccommodationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccommodationServiceServer struct {
}

func (UnimplementedAccommodationServiceServer) GetAllAccommodations(context.Context, *GetAllAccommodationsRequest) (*GetAllAccommodationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodations not implemented")
}
func (UnimplementedAccommodationServiceServer) CreateAccommodation(context.Context, *CreateAccommodationRequest) (*CreateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccommodation not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAccommodationByAvailability(context.Context, *GetAccommodationByAvailabilityRequest) (*GetAccommodationByAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccommodationByAvailability not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAllAvailabilities(context.Context, *GetAllAvailabilitiesRequest) (*GetAllAvailabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAvailabilities not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAvailabilityById(context.Context, *GetAvailabilityByIdRequest) (*GetAvailabilityByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailabilityById not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAccommodationById(context.Context, *GetAccommodationByIdRequest) (*GetAccommodationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccommodationById not implemented")
}
func (UnimplementedAccommodationServiceServer) CreateAvailability(context.Context, *CreateAvailabilityRequest) (*CreateAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvailability not implemented")
}
func (UnimplementedAccommodationServiceServer) UpdateAvailability(context.Context, *UpdateAvailabilityRequest) (*UpdateAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailability not implemented")
}
func (UnimplementedAccommodationServiceServer) SearchAvailability(context.Context, *SearchAvailabilityRequest) (*SearchAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAvailability not implemented")
}
func (UnimplementedAccommodationServiceServer) DeleteAccommodationsByHost(context.Context, *DeleteAccommodationsByHostRequest) (*DeleteAccommodationsByHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodationsByHost not implemented")
}
func (UnimplementedAccommodationServiceServer) GetEveryAccommodation(context.Context, *GetEveryAccommodationRequest) (*GetEveryAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEveryAccommodation not implemented")
}
func (UnimplementedAccommodationServiceServer) CreateAccommodationGrade(context.Context, *CreateAccommodationGradeRequest) (*CreateAccommodationGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccommodationGrade not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAllAccommodationGuestGrades(context.Context, *GetAllAccommodationGuestGradesRequest) (*GetAllAccommodationGuestGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodationGuestGrades not implemented")
}
func (UnimplementedAccommodationServiceServer) UpdateAccommodationGrade(context.Context, *UpdateAccommodationGradeRequest) (*UpdateAccommodationGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccommodationGrade not implemented")
}
func (UnimplementedAccommodationServiceServer) DeleteAccommodationGrade(context.Context, *DeleteAccommodationGradeRequest) (*DeleteAccommodationGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodationGrade not implemented")
}
func (UnimplementedAccommodationServiceServer) GetAllAccommodationGrade(context.Context, *GetAllAccommodationGradeRequest) (*GetAllAccommodationGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodationGrade not implemented")
}
func (UnimplementedAccommodationServiceServer) FilterAvailability(context.Context, *FilterAvailabilityRequest) (*FilterAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAvailability not implemented")
}
func (UnimplementedAccommodationServiceServer) mustEmbedUnimplementedAccommodationServiceServer() {}

// UnsafeAccommodationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccommodationServiceServer will
// result in compilation errors.
type UnsafeAccommodationServiceServer interface {
	mustEmbedUnimplementedAccommodationServiceServer()
}

func RegisterAccommodationServiceServer(s grpc.ServiceRegistrar, srv AccommodationServiceServer) {
	s.RegisterService(&AccommodationService_ServiceDesc, srv)
}

func _AccommodationService_GetAllAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccommodationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAllAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAllAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAllAccommodations(ctx, req.(*GetAllAccommodationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_CreateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).CreateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_CreateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).CreateAccommodation(ctx, req.(*CreateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAccommodationByAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccommodationByAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAccommodationByAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAccommodationByAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAccommodationByAvailability(ctx, req.(*GetAccommodationByAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAllAvailabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAvailabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAllAvailabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAllAvailabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAllAvailabilities(ctx, req.(*GetAllAvailabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAvailabilityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailabilityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAvailabilityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAvailabilityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAvailabilityById(ctx, req.(*GetAvailabilityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAccommodationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccommodationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAccommodationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAccommodationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAccommodationById(ctx, req.(*GetAccommodationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_CreateAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).CreateAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_CreateAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).CreateAvailability(ctx, req.(*CreateAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_UpdateAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).UpdateAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_UpdateAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).UpdateAvailability(ctx, req.(*UpdateAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_SearchAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).SearchAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_SearchAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).SearchAvailability(ctx, req.(*SearchAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_DeleteAccommodationsByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccommodationsByHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).DeleteAccommodationsByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_DeleteAccommodationsByHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).DeleteAccommodationsByHost(ctx, req.(*DeleteAccommodationsByHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetEveryAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEveryAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetEveryAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetEveryAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetEveryAccommodation(ctx, req.(*GetEveryAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_CreateAccommodationGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccommodationGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).CreateAccommodationGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_CreateAccommodationGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).CreateAccommodationGrade(ctx, req.(*CreateAccommodationGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAllAccommodationGuestGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccommodationGuestGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAllAccommodationGuestGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAllAccommodationGuestGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAllAccommodationGuestGrades(ctx, req.(*GetAllAccommodationGuestGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_UpdateAccommodationGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccommodationGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).UpdateAccommodationGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_UpdateAccommodationGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).UpdateAccommodationGrade(ctx, req.(*UpdateAccommodationGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_DeleteAccommodationGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccommodationGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).DeleteAccommodationGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_DeleteAccommodationGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).DeleteAccommodationGrade(ctx, req.(*DeleteAccommodationGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_GetAllAccommodationGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccommodationGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).GetAllAccommodationGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_GetAllAccommodationGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).GetAllAccommodationGrade(ctx, req.(*GetAllAccommodationGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationService_FilterAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceServer).FilterAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationService_FilterAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceServer).FilterAvailability(ctx, req.(*FilterAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccommodationService_ServiceDesc is the grpc.ServiceDesc for AccommodationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccommodationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accommodation_service.AccommodationService",
	HandlerType: (*AccommodationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAccommodations",
			Handler:    _AccommodationService_GetAllAccommodations_Handler,
		},
		{
			MethodName: "CreateAccommodation",
			Handler:    _AccommodationService_CreateAccommodation_Handler,
		},
		{
			MethodName: "GetAccommodationByAvailability",
			Handler:    _AccommodationService_GetAccommodationByAvailability_Handler,
		},
		{
			MethodName: "GetAllAvailabilities",
			Handler:    _AccommodationService_GetAllAvailabilities_Handler,
		},
		{
			MethodName: "GetAvailabilityById",
			Handler:    _AccommodationService_GetAvailabilityById_Handler,
		},
		{
			MethodName: "GetAccommodationById",
			Handler:    _AccommodationService_GetAccommodationById_Handler,
		},
		{
			MethodName: "CreateAvailability",
			Handler:    _AccommodationService_CreateAvailability_Handler,
		},
		{
			MethodName: "UpdateAvailability",
			Handler:    _AccommodationService_UpdateAvailability_Handler,
		},
		{
			MethodName: "SearchAvailability",
			Handler:    _AccommodationService_SearchAvailability_Handler,
		},
		{
			MethodName: "DeleteAccommodationsByHost",
			Handler:    _AccommodationService_DeleteAccommodationsByHost_Handler,
		},
		{
			MethodName: "GetEveryAccommodation",
			Handler:    _AccommodationService_GetEveryAccommodation_Handler,
		},
		{
			MethodName: "CreateAccommodationGrade",
			Handler:    _AccommodationService_CreateAccommodationGrade_Handler,
		},
		{
			MethodName: "GetAllAccommodationGuestGrades",
			Handler:    _AccommodationService_GetAllAccommodationGuestGrades_Handler,
		},
		{
			MethodName: "UpdateAccommodationGrade",
			Handler:    _AccommodationService_UpdateAccommodationGrade_Handler,
		},
		{
			MethodName: "DeleteAccommodationGrade",
			Handler:    _AccommodationService_DeleteAccommodationGrade_Handler,
		},
		{
			MethodName: "GetAllAccommodationGrade",
			Handler:    _AccommodationService_GetAllAccommodationGrade_Handler,
		},
		{
			MethodName: "FilterAvailability",
			Handler:    _AccommodationService_FilterAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accommodation_service/accommodation_service.proto",
}
